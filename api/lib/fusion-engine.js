// Ï°∞Ìï© ÏóîÏßÑ - Îã®Ïùº ÏßÑÏã§ ÏÜåÏä§(SSOT)
const crypto = require('crypto');

// ÏóîÏßÑ Î≤ÑÏ†Ñ Í¥ÄÎ¶¨
const ENGINE_VERSION = '2.0.0';
const POLICY_VERSION = '1.0.0';

/**
 * ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞ Ï†ÑÎûµ
 */
class RateStrategy {
  constructor() {
    this.baseSuccessRate = 0.6; // 60% Í∏∞Î≥∏ ÏÑ±Í≥µÎ•†
    this.maxBonusRate = 0.3; // ÏµúÎåÄ 30% Î≥¥ÎÑàÏä§
    this.cardBonusRate = 0.05; // Ïπ¥Îìú 1Ïû•Îãπ 5% Î≥¥ÎÑàÏä§
    this.minSuccessRate = 0.05; // ÏµúÏÜå 5% ÏÑ±Í≥µÎ•†
    this.maxSuccessRate = 0.95; // ÏµúÎåÄ 95% ÏÑ±Í≥µÎ•†
  }

  /**
   * ÏÑ±Í≥µÎ•†Í≥º Î∂ÑÌï¥Í∞í Í≥ÑÏÇ∞
   * @param {Object} params - Í≥ÑÏÇ∞ ÌååÎùºÎØ∏ÌÑ∞
   * @param {Array} params.materials - Ïû¨Î£å Ïπ¥Îìú ID Î∞∞Ïó¥
   * @param {Object} params.recipe - Î†àÏãúÌîº Ï†ïÎ≥¥ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
   * @param {string} params.userTier - ÏÇ¨Ïö©Ïûê Îì±Í∏â
   * @param {number} params.pity - ÌîºÌã∞ Ïπ¥Ïö¥ÌÑ∞
   * @returns {Object} ÏÑ±Í≥µÎ•†Í≥º Î∂ÑÌï¥Í∞í
   */
  calculateSuccessRate({ materials, recipe, userTier, pity = 0 }) {
    const materialCount = materials.length;
    
    // Í∏∞Î≥∏ ÏÑ±Í≥µÎ•†
    const baseRate = this.baseSuccessRate;
    
    // Ïπ¥Îìú Ïàò Î≥¥ÎÑàÏä§
    const cardBonus = Math.min(
      this.maxBonusRate, 
      materialCount * this.cardBonusRate
    );
    
    // ÌîºÌã∞ Î≥¥ÎÑàÏä§ (ÌîºÌã∞ 10Îãπ 1% Ï∂îÍ∞Ä, ÏµúÎåÄ 10%)
    const pityBonus = Math.min(0.1, pity * 0.01);
    
    // ÏÇ¨Ïö©Ïûê Îì±Í∏â Î≥¥ÎÑàÏä§
    const tierBonus = this.getTierBonus(userTier);
    
    // Î†àÏãúÌîº Î≥¥ÎÑàÏä§ (ÏûàÎã§Î©¥)
    const recipeBonus = recipe ? this.getRecipeBonus(recipe) : 0;
    
    // ÏµúÏ¢Ö ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞
    const finalRate = Math.max(
      this.minSuccessRate,
      Math.min(
        this.maxSuccessRate,
        baseRate + cardBonus + pityBonus + tierBonus + recipeBonus
      )
    );
    
    return {
      rate: finalRate,
      breakdown: {
        base: baseRate,
        card_bonus: cardBonus,
        pity_bonus: pityBonus,
        tier_bonus: tierBonus,
        recipe_bonus: recipeBonus,
        material_count: materialCount,
        pity_count: pity
      }
    };
  }

  getTierBonus(userTier) {
    const tierBonuses = {
      'bronze': 0.0,
      'silver': 0.02,
      'gold': 0.05,
      'platinum': 0.08,
      'diamond': 0.12
    };
    return tierBonuses[userTier] || 0.0;
  }

  getRecipeBonus(recipe) {
    // Î†àÏãúÌîºÎ≥Ñ Î≥¥ÎÑàÏä§ (Ìñ•ÌõÑ ÌôïÏû• Í∞ÄÎä•)
    return recipe.bonusRate || 0.0;
  }
}

/**
 * Í≤∞Í≥º ÌõÑÎ≥¥ Í≤∞Ï†ï Ï†ïÏ±Ö
 */
class OutcomePolicy {
  constructor() {
    this.rankWeights = {
      'A': 0.60,   // 60%
      'S': 0.30,   // 30%
      'SS': 0.08,  // 8%
      'SSS': 0.02  // 2%
    };
    
    this.rankMultipliers = {
      'A': { hp: 1.0, attack: 1.0 },
      'S': { hp: 1.2, attack: 1.2 },
      'SS': { hp: 1.5, attack: 1.5 },
      'SSS': { hp: 2.0, attack: 2.0 }
    };
  }

  /**
   * Í≤∞Í≥º ÌõÑÎ≥¥Íµ∞Í≥º Í∞ÄÏ§ëÏπò ÏÉùÏÑ±
   * @param {Object} params - Ï†ïÏ±Ö ÌååÎùºÎØ∏ÌÑ∞
   * @param {Array} params.materials - Ïû¨Î£å Ïπ¥ÎìúÎì§
   * @param {boolean} params.isSuccess - Ï°∞Ìï© ÏÑ±Í≥µ Ïó¨Î∂Ä
   * @param {Object} params.recipe - Î†àÏãúÌîº Ï†ïÎ≥¥
   * @returns {Object} ÌõÑÎ≥¥Íµ∞Í≥º Í∞ÄÏ§ëÏπò
   */
  generateCandidates({ materials, isSuccess, recipe }) {
    if (!isSuccess) {
      return {
        candidates: [],
        weights: [],
        selected: null
      };
    }

    // ÏÑ±Í≥µ Ïãú Îì±Í∏âÎ≥Ñ ÌõÑÎ≥¥ ÏÉùÏÑ±
    const candidates = [];
    const weights = [];
    
    for (const [rank, weight] of Object.entries(this.rankWeights)) {
      candidates.push({
        rank,
        weight,
        multiplier: this.rankMultipliers[rank]
      });
      weights.push(weight);
    }

    // Í∞ÄÏ§ëÏπò Ï†ïÍ∑úÌôî
    const totalWeight = weights.reduce((sum, w) => sum + w, 0);
    const normalizedWeights = weights.map(w => w / totalWeight);

    // Í∞ÄÏ§ëÏπò Í∏∞Î∞ò ÏÑ†ÌÉù
    const selected = this.selectByWeight(candidates, normalizedWeights);

    return {
      candidates,
      weights: normalizedWeights,
      selected
    };
  }

  selectByWeight(candidates, weights) {
    const random = crypto.randomBytes(4).readUInt32BE(0) / 0xFFFFFFFF;
    let cumulative = 0;
    
    for (let i = 0; i < candidates.length; i++) {
      cumulative += weights[i];
      if (random <= cumulative) {
        return candidates[i];
      }
    }
    
    // Ìè¥Î∞±: ÎßàÏßÄÎßâ ÌõÑÎ≥¥
    return candidates[candidates.length - 1];
  }
}

/**
 * Ï°∞Ìï© ÌîåÎ°úÏö∞ Í¥ÄÎ¶¨
 */
class FusionFlow {
  constructor(database) {
    this.db = database;
    this.rateStrategy = new RateStrategy();
    this.outcomePolicy = new OutcomePolicy();
  }

  /**
   * Ï°∞Ìï© Ïã§Ìñâ (Î©îÏù∏ ÌîåÎ°úÏö∞)
   * @param {Object} params - Ï°∞Ìï© ÌååÎùºÎØ∏ÌÑ∞
   * @returns {Object} Ï°∞Ìï© Í≤∞Í≥º
   */
  async executeFusion(params) {
    const {
      userId,
      materials,
      fusionId,
      recipe = null,
      userTier = 'bronze',
      pity = 0,
      sessionId = null
    } = params;

    console.log('üéØ FusionEngine.executeFusion ÏãúÏûë');
    console.log('ÌååÎùºÎØ∏ÌÑ∞:', { userId, materials, fusionId, recipe, userTier, pity });

    try {
      // 1. ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞
      const rateResult = this.rateStrategy.calculateSuccessRate({
        materials,
        recipe,
        userTier,
        pity
      });

      console.log('üìä ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞ ÏôÑÎ£å:', rateResult);

      // 2. ÏÑ±Í≥µ/Ïã§Ìå® ÌåêÏ†ï
      const isSuccess = this.determineSuccess(rateResult.rate);
      console.log(`üé≤ Ï°∞Ìï© Í≤∞Í≥º: ${isSuccess ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);

      // 3. Í≤∞Í≥º ÌõÑÎ≥¥ ÏÉùÏÑ±
      const outcomeResult = this.outcomePolicy.generateCandidates({
        materials,
        isSuccess,
        recipe
      });

      console.log('üéØ Í≤∞Í≥º ÌõÑÎ≥¥ ÏÉùÏÑ± ÏôÑÎ£å:', outcomeResult);

      // 4. Í≤∞Í≥º Î∞òÌôò
      const result = {
        success: true,
        data: {
          fusionSuccess: isSuccess,
          successRate: rateResult.rate,
          successRateBreakdown: rateResult.breakdown,
          candidates: outcomeResult.candidates,
          selected: outcomeResult.selected,
          materialsUsed: materials,
          engineVersion: ENGINE_VERSION,
          policyVersion: POLICY_VERSION,
          fusionId,
          timestamp: new Date().toISOString()
        },
        metadata: {
          engineVersion: ENGINE_VERSION,
          policyVersion: POLICY_VERSION,
          sessionId,
          requestId: fusionId
        }
      };

      console.log('‚úÖ FusionEngine.executeFusion ÏôÑÎ£å');
      return result;

    } catch (error) {
      console.error('‚ùå FusionEngine.executeFusion Ïã§Ìå®:', error);
      throw error;
    }
  }

  /**
   * ÏÑ±Í≥µ/Ïã§Ìå® ÌåêÏ†ï
   * @param {number} successRate - ÏÑ±Í≥µÎ•† (0-1)
   * @returns {boolean} ÏÑ±Í≥µ Ïó¨Î∂Ä
   */
  determineSuccess(successRate) {
    const random = crypto.randomBytes(4).readUInt32BE(0) / 0xFFFFFFFF;
    return random < successRate;
  }

  /**
   * HMAC ÏÑúÎ™Ö ÏÉùÏÑ± (Í≥µÏ†ïÏÑ± Í≤ÄÏ¶ùÏö©)
   * @param {Object} data - ÏÑúÎ™ÖÌï† Îç∞Ïù¥ÌÑ∞
   * @param {string} secret - ÎπÑÎ∞ÄÌÇ§
   * @returns {string} HMAC ÏÑúÎ™Ö
   */
  generateSignature(data, secret) {
    const payload = JSON.stringify(data);
    return crypto.createHmac('sha256', secret).update(payload).digest('hex');
  }

  /**
   * ÏóîÏßÑ Î≤ÑÏ†Ñ Ï†ïÎ≥¥ Î∞òÌôò
   */
  getVersionInfo() {
    return {
      engineVersion: ENGINE_VERSION,
      policyVersion: POLICY_VERSION,
      features: [
        'rate_calculation',
        'outcome_policy',
        'pity_system',
        'tier_bonus',
        'recipe_support'
      ]
    };
  }
}

module.exports = {
  FusionFlow,
  RateStrategy,
  OutcomePolicy,
  ENGINE_VERSION,
  POLICY_VERSION
};
